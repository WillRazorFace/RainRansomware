from Crypto.Cipher import AES
from winreg import *
from shutil import copyfile
from ctypes import windll
from os import remove, getenv
from os.path import splitext
from struct import unpack, calcsize
from glob import iglob


class Decrypter:
    """
    Contains the necessary methods for decrypting the infected machine's files and other
    "useful" functions (__get_key, restore_background, delete_registry).
    """
    def __init__(self) -> None:
        self.__key = self.__get_key()

        if self.__key is None:  # If the "__get_key" method returns None, the program is closed.
            exit(1)

    def __decrypt_file(self, file: str, chunksize=64 * 2048) -> None:
        """
        Corrects the extension of the encrypted file from the information left by the
        encryption code (see line 54 of "crypter"). After that, it decrypts the file data
        using the same method used for encryption and saves the decrypted data in a new
        file, now with the correct extension. Removes the file with the Ransomware extension.

        NOTE: Should only be used by the "decrypt_directory" method.

        Parameters
        ----------
        file : str
            Path to the file to be decrypted
        chunksize: int
            Sets the size of the chunk which the function
            uses to read and decrypt the file. Larger chunk
            sizes can be faster for some files and machines.
            chunksize must be divisible by 16.

        Return
        ----------
        None
        """
        cnt = 0  # First part of method (correct the extension)
        chars = []

        while True:
            with open(file, 'rb') as f:
                f.seek(cnt)
                char = f.read(1)

                if char != b'.':
                    chars.append(char)
                    cnt += 1
                else:
                    break

        ext = ''.join([x.decode('utf-8') for x in chars])
        filename = splitext(file)[0] + '.' + ext

        with open(file, 'rb') as f:
            cnt += 1
            f.seek(cnt)
            filedata = f.read()

        with open(file, 'wb') as f:
            f.write(filedata)

        with open(file, 'rb') as fin:  # Second part of method (decrypt the file)
            fsz = unpack('<Q', fin.read(calcsize('<Q')))[0]
            iv = fin.read(16)
            decryptor = AES.new(self.__key, AES.MODE_CBC, iv)

            with open(filename, 'wb') as fout:
                while True:
                    data = fin.read(chunksize)
                    n = len(data)
                    if n == 0:
                        break
                    decd = decryptor.decrypt(data)
                    n = len(decd)
                    if fsz > n:
                        fout.write(decd)
                    else:
                        fout.write(decd[:fsz])
                    fsz -= n

        remove(file)

    def decrypt_directory(self, directory: str) -> None:
        """
        Decrypts all files in a directory (including their sub-directories) using the
        "iglob" generator. If, when calling the "__decrypt_file" method, an exception of
        type "PermissionError" is thrown, the code moves on to the next file.

        Parameters
        ----------
        directory: str
            Path to the directory to be decrypted

        Return
        ----------
        None
        """
        files = iglob(directory + '/**/*.rain', recursive=True)

        for file in files:
            try:
                self.__decrypt_file(file)
            except PermissionError:
                continue

    def __get_key(self) -> (bytes, None):
        """
        Retrieve the random key generated by the Windows registry encryption code and
        convert it to its original type, bytes. If all attempts to access the Windows
        registry fail, return None.

        NOTE: Should only be used in the initializer method (__init__).

        Return
        ----------
        None
            If all attempts to access the Windows registry fail
        bytes
            If the key is found
        """
        try:
            winkey = OpenKey(HKEY_LOCAL_MACHINE, '')
            binkey = QueryValueEx(winkey, ' ')[0]
            key = (bytes(int(binkey[i: i + 8], 2) for i in range(0, len(binkey), 8)))
            DeleteValue(winkey, ' ')
            CloseKey(winkey)
        except (PermissionError, FileNotFoundError):
            try:
                winkey = OpenKey(HKEY_CURRENT_USER, '')
                binkey = QueryValueEx(winkey, ' ')[0]
                key = (bytes(int(binkey[i: i + 8], 2) for i in range(0, len(binkey), 8)))
                DeleteValue(winkey, ' ')
                CloseKey(winkey)
            except FileNotFoundError:
                return

        return key

    @staticmethod
    def delete_registry(keypath: str, name: str) -> (str, None):
        """
        Deletes registries that may have been created by the encryption code in the Windows
        registry.

        Parameters
        ----------
        keypath: str
            Path of the key that will be deleted
        name: str
            Name of key

        Return
        ----------
        str
            When the value of key is get
        None
            When not
        """
        try:
            key = OpenKey(HKEY_LOCAL_MACHINE, keypath, access=KEY_ALL_ACCESS)
            exe = QueryValueEx(key, name)[0].strip('"')
            DeleteValue(key, name)
            CloseKey(key)

            return exe
        except (PermissionError, FileNotFoundError):
            try:
                key = OpenKey(HKEY_CURRENT_USER, keypath, access=KEY_ALL_ACCESS)
                exe = QueryValueEx(key, name)[0].strip('"')
                DeleteValue(key, name)
                CloseKey(key)

                return exe
            except FileNotFoundError:
                return

    @staticmethod
    def restore_background(appdata=getenv('APPDATA')) -> None:
        """
        Restore the background of the machine's desktop using the "SystemParametersInfoW"
        function from "windll". This function is uncertain and may not work properly, making
        the background just empty (black). Removes the Rain's background.

        Parameters
        ----------
        appdata: str
            Path to the "appdata" folder, obtained by the "getenv" function.
            It should not be changed.

        Return
        ----------
        None
        """
        old = appdata + '/Microsoft/Windows/Themes/OldTranscodedWallpaper'
        changed = appdata + '/Microsoft/Windows/Themes/TranscodedWallpaper'

        try:
            copyfile(old, changed)
            remove(old)
        except FileNotFoundError:
            return

        windll.user32.SystemParametersInfoW(20, 0, changed, 0)
